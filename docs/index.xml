<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Docs on WebRTC for the Curious</title><link>https://webrtcforthecurious.com/docs/</link><description>Recent content in Docs on WebRTC for the Curious</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://webrtcforthecurious.com/docs/index.xml" rel="self" type="application/rss+xml"/><item><title>What, Why and How</title><link>https://webrtcforthecurious.com/docs/01-what-why-and-how/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/01-what-why-and-how/</guid><description>What is WebRTC. # WebRTC is both an API and Protocol. The WebRTC protocol is a set of rules for two agents to negotiate bi-directional secure communication. The WebRTC API was designed just for Javascript. This Javascript API then allows web developers to use the WebRTC protocol in the browser.
A similar relationship would be HTTP and the fetch API. WebRTC the protocol would be HTTP, and WebRTC the API would be the fetch API.</description></item><item><title>Signaling</title><link>https://webrtcforthecurious.com/docs/02-signaling/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/02-signaling/</guid><description>Why do I need signaling? # When you create a WebRTC agent it knows nothing about the other peer. It has no idea who it is going to connect with or what they are going to send! Signaling is the inital bootstrapping that makes the call possible. After these values are exhanged the WebRTC agents then can communicate directly with each other.
Signaling messages are just text. The WebRTC agents don&amp;rsquo;t care how they are transported.</description></item><item><title>Connecting</title><link>https://webrtcforthecurious.com/docs/03-connecting/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/03-connecting/</guid><description>Why do I need a dedicated subsystem for connecting? # WwbRTC will go to great lengths to achieve direct bi-directional communication between two WebRTC Agents. These agents may even be in different networks with no direct communication between agents, by using NAT Traversal WebRTC can make communication happen. NAT Traversal is a networking technique that enables communication between two peers that can&amp;rsquo;t directly connect.
In situations where direct connectivity doesn&amp;rsquo;t exist and NAT Traversal fails WebRTC has other techniques.</description></item><item><title>Securing</title><link>https://webrtcforthecurious.com/docs/04-securing/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/04-securing/</guid><description>Securing # DTLS # SRTP #</description></item><item><title>Media Communication</title><link>https://webrtcforthecurious.com/docs/05-media-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/05-media-communication/</guid><description>Audio and Video Communication # RTP/RTCP # Protocol Basics Loss and Error Resilience Congestion Control</description></item><item><title>Data Communication</title><link>https://webrtcforthecurious.com/docs/06-data-communication/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/06-data-communication/</guid><description>SCTP #</description></item><item><title>What Can You Build?</title><link>https://webrtcforthecurious.com/docs/07-what-can-you-build/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/07-what-can-you-build/</guid><description/></item><item><title>Debugging</title><link>https://webrtcforthecurious.com/docs/08-debugging/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/08-debugging/</guid><description>Debugging # Reduce Surface Area # Network Debugging # Media Debugging # Data Debugging #</description></item><item><title>History</title><link>https://webrtcforthecurious.com/docs/09-history-of-webrtc/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/09-history-of-webrtc/</guid><description>History # This section is ongoing and we donâ€™t have all the facts yet. We are conducting interviews and build a history of digital communication.
Pre-RTP # RTP # SDP # ICE # SRTP # SCTP # DTLS #</description></item><item><title>FAQ</title><link>https://webrtcforthecurious.com/docs/10-faq/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://webrtcforthecurious.com/docs/10-faq/</guid><description>FAQ #</description></item></channel></rss>